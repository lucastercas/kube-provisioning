---
# - name: Install Kubeadm Packages
#   command: kubeadm config images pull

- name: Check if kubernetes has been initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: kubernetes_init_stat

- name: Create cluster with control plane endpoint
  block:
    - name: Init master
      command: >
        kubeadm init
        --control-plane-endpoint "{{ hostvars[groups.loadbalancers[0]].ansible_host }}:6443"
        --upload-certs
        --pod-network-cidr="{{ kubernetes_network.pod_network_cidr }}"
        --ignore-preflight-errors="{{ kubernetes_ignore_preflight_erros }}"
      register: kubeadmin_init_endpoint
      when:
        - not kubernetes_init_stat.stat.exists
    - name: Print output
      debug:
        var: kubeadmin_init_endpoint
  when: master_creation_mode == "control_plane"

- name: Create cluster with advertise apiserver address
  block:
    - name: Init master
      command: >
        kubeadm init
        --apiserver-advertise-address={{ kubernetes_apiserver_advertise_address | default(ansible_default_ipv4.address, true) }}
        --upload-certs
        --pod-network-cidr="{{ kubernetes_network.pod_network_cidr }}"
        --ignore-preflight-errors="{{ kubernetes_ignore_preflight_erros }}"
      register: kubeadmin_init_advertise
      when:
        - not kubernetes_init_stat.stat.exists
    - name: Print output
      debug:
        var: kubeadmin_init_advertise
  when: master_creation_mode == "advertise_ip"

- name: Get kubeconfig file
  fetch:
    src: /etc/kubernetes/admin.conf
    dest: ../kubeconfigs
  when: "'controlplane' in kubernetes_roles"

- name: Ensure .kube directory exists
  file:
    path: ~/.kube
    state: directory

- name: Symlink kubeconfig to ~/.kube/config
  file:
    src: /etc/kubernetes/admin.conf
    dest: ~/.kube/config
    state: link

- name: Taint master
  command: kubectl taint nodes --all node-role.kubernetes.io/master-
  when: kubernetes_taint_master == true

- name: Configure flannel cni plugin
  command: "{{ item }}"
  with_items:
    - kubectl apply -f {{ kubernetes_flannel_manifest_file_rbac }}
    - kubectl apply -f {{ kubernetes_flannel_manifest_file }}
  register: flannel_result
  changed_when: "'created' in flannel_result.stdout"
  when: kubernetes_network.cni == "flannel"

- name: Configure weave cni plugin
  block:
    - name: Get kubernetes version for weave installation.
      shell: kubectl version | base64 | tr -d '\n'
      changed_when: false
      register: kubectl_version

    - name: Install weave network plugin
      command: "kubectl apply -f https://cloud.weave.works/k8s/net?k8s-version={{ kubectl_version.stdout_lines[0] }}"
      register: weave_result
      changed_when: "'created' in weave_result.stdout"
  when: kubernetes_network.cni == "weave"
  
# - name: Add ingress nginx controller
#   command: kubectl apply -f "{{ kubernetes_ingress_controller }}"

- name: Check if dashboard ui service exists
  shell: kubectl get services --namespace kube-system | grep -q kubernetes-dashboard
  changed_when: false
  failed_when: false
  register: has_kubernetes_dashboard_service
  when: kubernetes_enable_dashboard | bool

- name: Debug has service
  debug:
    var: kubernetes_dashboard_service

- name: Debug if service enabled
  debug:
    var: kubernetes_enable_dashboard

- name: Enable dashboard ui
  command: kubectl create -f "{{ kubernetes_dashboard_manifest }}"
  when:
    - kubernetes_enable_dashboard | bool
